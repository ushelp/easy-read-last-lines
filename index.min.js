/**
 * easy-read-last-lines
 *
 * Read the last N lines in the file. (like tail -n)
 *
 * Version 2.0.0
 *
 * @author [ inthinkcolor@gmail.com ]
 *
 * @see https://github.com/ushelp/easy-read-last-lines
 *
 * Copyright 2022 Ray, EasyProject
 * Released under the MIT license
 *
 * [Node.js]
 *
 */
var fsp=require("mz/fs");function _read(filePath,maxLine,encoding,returnBuffer){return new Promise(function(resolve,reject){var self={stat:null,file:null};returnBuffer||encoding||(encoding="utf8"),fsp.exists(filePath).then(function(exists){if(!exists)throw new Error("File does not exist")}).then(function(){var promises=[];return promises.push(fsp.stat(filePath).then(function(stat){return self.stat=stat})),promises.push(fsp.open(filePath,"r").then(function(file){return self.file=file})),promises}).then(function(promises){Promise.all(promises).then(function(){var chars=0,lineCount=0,newLineCharacters=["\n","\r"],bufferBytes=[],isNewLine=!1;!function do_while_loop(){if(bufferBytes.length>self.stat.size&&bufferBytes.splice(0,lines.length-self.stat.size),bufferBytes.length>=self.stat.size||lineCount>=maxLine)return newLineCharacters.indexOf(String.fromCharCode(bufferBytes[0]))>=0&&bufferBytes.shift(),fsp.close(self.file),resolve(returnBuffer?Buffer.from(bufferBytes):Buffer.from(bufferBytes).toString());fsp.read(self.file,Buffer.alloc(1),0,1,self.stat.size-1-chars).then(function(bytesReadAndBuffer){bufferBytes.unshift(bytesReadAndBuffer[1][0]);var nextCharacter=String.fromCharCode(bytesReadAndBuffer[1][0]),pos=newLineCharacters.indexOf(nextCharacter);"\r"==nextCharacter&&isNewLine||pos>=0&&bufferBytes.length>1&&lineCount++,isNewLine="\n"==nextCharacter,chars++,do_while_loop()})}()})}).catch(function(reason){return null!==self.file&&fsp.close(self.file),reject(reason)})})}var EasyReadLastLines={read:function(filePath,maxLine,encoding){return _read(filePath,maxLine,encoding,!1)},readBuffer:function(filePath,maxLine){return _read(filePath,maxLine,null,!0)}};module.exports=EasyReadLastLines;